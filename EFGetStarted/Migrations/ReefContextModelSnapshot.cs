// <auto-generated />
using DanimalReefSurvey;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DanimalReefSurvey.Migrations
{
    [DbContext(typeof(ReefContext))]
    partial class ReefContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DanimalReefSurvey.Batch", b =>
                {
                    b.Property<int>("BatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BatchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.HasKey("BatchId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Batchs");
                });

            modelBuilder.Entity("DanimalReefSurvey.Characteristic", b =>
                {
                    b.Property<int>("CharacteristicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<int>("NameId")
                        .HasColumnType("int");

                    b.Property<string>("Structure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trophic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharacteristicId");

                    b.HasIndex("NameId");

                    b.ToTable("FishCharacteristics");
                });

            modelBuilder.Entity("DanimalReefSurvey.Fish", b =>
                {
                    b.Property<int>("FishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.HasKey("FishId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Fishes");
                });

            modelBuilder.Entity("DanimalReefSurvey.Index", b =>
                {
                    b.Property<int>("IndexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<string>("IndexNum")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IndexId");

                    b.HasIndex("BatchId");

                    b.ToTable("Indexes");
                });

            modelBuilder.Entity("DanimalReefSurvey.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("StudyAreaId")
                        .HasColumnType("int");

                    b.HasKey("LocationId");

                    b.HasIndex("StudyAreaId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("DanimalReefSurvey.Name", b =>
                {
                    b.Property<int>("NameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Family")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FishId")
                        .HasColumnType("int");

                    b.Property<string>("ScientificName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NameId");

                    b.HasIndex("FishId");

                    b.ToTable("FishNames");
                });

            modelBuilder.Entity("DanimalReefSurvey.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RegionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("DanimalReefSurvey.StudyArea", b =>
                {
                    b.Property<int>("StudyAreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StudyAreaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubRegionId")
                        .HasColumnType("int");

                    b.HasKey("StudyAreaId");

                    b.HasIndex("SubRegionId");

                    b.ToTable("StudyAreas");
                });

            modelBuilder.Entity("DanimalReefSurvey.SubRegion", b =>
                {
                    b.Property<int>("SubRegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("SubRegionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubRegionId");

                    b.HasIndex("RegionId");

                    b.ToTable("SubRegions");
                });

            modelBuilder.Entity("DanimalReefSurvey.Survey", b =>
                {
                    b.Property<int>("SurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("SurveyId");

                    b.HasIndex("RegionId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("DanimalReefSurvey.Batch", b =>
                {
                    b.HasOne("DanimalReefSurvey.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DanimalReefSurvey.Characteristic", b =>
                {
                    b.HasOne("DanimalReefSurvey.Name", "Name")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DanimalReefSurvey.Fish", b =>
                {
                    b.HasOne("DanimalReefSurvey.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DanimalReefSurvey.Index", b =>
                {
                    b.HasOne("DanimalReefSurvey.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DanimalReefSurvey.Location", b =>
                {
                    b.HasOne("DanimalReefSurvey.StudyArea", "StudyArea")
                        .WithMany()
                        .HasForeignKey("StudyAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DanimalReefSurvey.Name", b =>
                {
                    b.HasOne("DanimalReefSurvey.Fish", "Fish")
                        .WithMany()
                        .HasForeignKey("FishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DanimalReefSurvey.StudyArea", b =>
                {
                    b.HasOne("DanimalReefSurvey.SubRegion", "SubRegion")
                        .WithMany()
                        .HasForeignKey("SubRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DanimalReefSurvey.SubRegion", b =>
                {
                    b.HasOne("DanimalReefSurvey.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DanimalReefSurvey.Survey", b =>
                {
                    b.HasOne("DanimalReefSurvey.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
